package com.students.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Surname = new Property(2, String.class, "surname", false, "SURNAME");
        public final static Property Course = new Property(3, int.class, "course", false, "COURSE");
        public final static Property Occupation = new Property(4, String.class, "occupation", false, "OCCUPATION");
        public final static Property Results = new Property(5, int.class, "results", false, "RESULTS");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SURNAME\" TEXT," + // 2: surname
                "\"COURSE\" INTEGER NOT NULL ," + // 3: course
                "\"OCCUPATION\" TEXT," + // 4: occupation
                "\"RESULTS\" INTEGER NOT NULL );"); // 5: results
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(3, surname);
        }
        stmt.bindLong(4, entity.getCourse());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(5, occupation);
        }
        stmt.bindLong(6, entity.getResults());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String surname = entity.getSurname();
        if (surname != null) {
            stmt.bindString(3, surname);
        }
        stmt.bindLong(4, entity.getCourse());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(5, occupation);
        }
        stmt.bindLong(6, entity.getResults());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // surname
            cursor.getInt(offset + 3), // course
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // occupation
            cursor.getInt(offset + 5) // results
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSurname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCourse(cursor.getInt(offset + 3));
        entity.setOccupation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResults(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
